/// <reference lib="webworker" />

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { BackgroundSyncPlugin } from 'workbox-background-sync';
import { warmStrategyCache } from 'workbox-recipes';
import { openDB, DBSchema, IDBPDatabase } from 'idb';

declare const self: ServiceWorkerGlobalScope;

// Interface para o banco de dados IndexedDB
interface VocalCoachDB extends DBSchema {
  'offline-exercises': {
    key: string;
    value: {
      id: string;
      data: any;
      timestamp: number;
      synced: boolean;
    };
  };
  'offline-progress': {
    key: string;
    value: {
      userId: string;
      data: any;
      timestamp: number;
      synced: boolean;
    };
  };
}

let db: IDBPDatabase<VocalCoachDB>;

// Inicializa o banco de dados
const initDB = async () => {
  db = await openDB<VocalCoachDB>('vocalcoach-offline', 1, {
    upgrade(db) {
      db.createObjectStore('offline-exercises');
      db.createObjectStore('offline-progress');
    },
  });
};

initDB();

// Precache all assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST);

// Enable immediate claim of clients
clientsClaim();

// URLs to warm up in cache
const URLS_TO_CACHE = [
  '/',
  '/index.html',
  '/offline.html',
  '/manifest.json',
  '/wave-pattern.svg',
  '/exercises/',
  '/practice/',
  '/dashboard/',
];

// Cache the Google Fonts stylesheets with a stale-while-revalidate strategy
registerRoute(
  ({ url }) => url.origin === 'https://fonts.googleapis.com',
  new StaleWhileRevalidate({
    cacheName: 'google-fonts-stylesheets',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 7 * 24 * 60 * 60, // 7 days
      }),
    ],
  })
);

// Cache the underlying font files with a cache-first strategy for 1 year
registerRoute(
  ({ url }) => url.origin === 'https://fonts.gstatic.com',
  new CacheFirst({
    cacheName: 'google-fonts-webfonts',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
        maxEntries: 30,
      }),
    ],
  })
);

// Cache static assets (images, styles, scripts) with a cache-first strategy
const staticAssetCache = new CacheFirst({
  cacheName: 'static-assets',
  plugins: [
    new CacheableResponsePlugin({
      statuses: [0, 200],
    }),
    new ExpirationPlugin({
      maxEntries: 100,
      maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
    }),
  ],
});

registerRoute(
  ({ request }) =>
    request.destination === 'image' ||
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'audio',
  staticAssetCache
);

// Warm up the cache with important assets
warmStrategyCache({
  urls: URLS_TO_CACHE,
  strategy: staticAssetCache,
});

// Cache API responses with a network-first strategy
registerRoute(
  ({ request }) => request.destination === 'document' || request.mode === 'cors',
  new NetworkFirst({
    cacheName: 'api-responses',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 200,
        maxAgeSeconds: 24 * 60 * 60, // 24 hours
      }),
    ],
    networkTimeoutSeconds: 3, // Fallback to cache if network is slow
  })
);

// Background sync plugin para dados offline
const bgSyncPlugin = new BackgroundSyncPlugin('offlineData', {
  maxRetentionTime: 24 * 60, // Retry for max of 24 Hours
  queueOptions: {
    onSync: async ({ queue }) => {
      try {
        // Sincroniza exercícios offline
        const exerciseKeys = await db.getAllKeys('offline-exercises');
        for (const key of exerciseKeys) {
          const exercise = await db.get('offline-exercises', key);
          if (exercise && !exercise.synced) {
            try {
              const response = await fetch('/api/exercises', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(exercise.data),
              });

              if (response.ok) {
                exercise.synced = true;
                await db.put('offline-exercises', exercise, key);
              }
            } catch (error) {
              console.error('Failed to sync exercise:', error);
            }
          }
        }

        // Sincroniza progresso offline
        const progressKeys = await db.getAllKeys('offline-progress');
        for (const key of progressKeys) {
          const progress = await db.get('offline-progress', key);
          if (progress && !progress.synced) {
            try {
              const response = await fetch('/api/progress', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(progress.data),
              });

              if (response.ok) {
                progress.synced = true;
                await db.put('offline-progress', progress, key);
              }
            } catch (error) {
              console.error('Failed to sync progress:', error);
            }
          }
        }

        // Processa a fila de requisições pendentes
        await queue.replayRequests();
      } catch (error) {
        console.error('Sync failed:', error);
      }
    },
  },
});

// Cache exercise data with offline support
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/exercises'),
  new NetworkFirst({
    cacheName: 'exercise-data',
    plugins: [
      bgSyncPlugin,
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 7 * 24 * 60 * 60, // 7 days
      }),
    ],
    networkTimeoutSeconds: 3,
  })
);

// Offline fallback
const offlineFallbackPage = '/offline.html';

// Serve cached content when offline with improved error handling
self.addEventListener('fetch', (event) => {
  // Intercepta requisições POST para salvar dados offline
  if (event.request.method === 'POST') {
    const url = new URL(event.request.url);
    
    if (url.pathname.startsWith('/api/exercises')) {
      event.respondWith(
        (async () => {
          try {
            const response = await fetch(event.request.clone());
            return response;
          } catch (error) {
            // Salva exercício offline
            const data = await event.request.json();
            await db.put('offline-exercises', {
              id: Date.now().toString(),
              data,
              timestamp: Date.now(),
              synced: false,
            }, Date.now().toString());

            return new Response(JSON.stringify({ success: true, offline: true }), {
              headers: { 'Content-Type': 'application/json' },
            });
          }
        })()
      );
      return;
    }

    if (url.pathname.startsWith('/api/progress')) {
      event.respondWith(
        (async () => {
          try {
            const response = await fetch(event.request.clone());
            return response;
          } catch (error) {
            // Salva progresso offline
            const data = await event.request.json();
            await db.put('offline-progress', {
              userId: data.userId,
              data,
              timestamp: Date.now(),
              synced: false,
            }, Date.now().toString());

            return new Response(JSON.stringify({ success: true, offline: true }), {
              headers: { 'Content-Type': 'application/json' },
            });
          }
        })()
      );
      return;
    }
  }

  // Navegação normal
  if (event.request.mode === 'navigate') {
    event.respondWith(
      (async () => {
        try {
          const preloadResponse = await event.preloadResponse;
          if (preloadResponse) {
            return preloadResponse;
          }

          const networkResponse = await fetch(event.request);
          return networkResponse;
        } catch (error) {
          const cache = await caches.open('offline-fallback');
          const cachedResponse = await cache.match(offlineFallbackPage);
          return cachedResponse;
        }
      })()
    );
  }
});

// Handle sync events
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-exercises') {
    event.waitUntil(bgSyncPlugin.queueOptions.onSync({ queue: null }));
  }
});

// Handle push notifications with improved payload handling
self.addEventListener('push', (event) => {
  const data = event.data?.json() ?? {};
  const options = {
    body: data.body,
    icon: '/icons/icon-192x192.png',
    badge: '/icons/badge-72x72.png',
    vibrate: [100, 50, 100],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: data.id || '1',
      url: data.url || '/',
      actions: data.actions || [],
      offline: data.offline || false,
    },
    actions: data.actions || [],
  };

  event.waitUntil(
    self.registration.showNotification(data.title || 'Notification', options)
  );
});

// Handle notification clicks with improved navigation
self.addEventListener('notificationclick', (event) => {
  event.notification.close();

  if (event.action) {
    // Handle custom actions
    const action = event.notification.data.actions.find(a => a.action === event.action);
    if (action) {
      event.waitUntil(clients.openWindow(action.url));
      return;
    }
  }

  // Default behavior
  event.waitUntil(
    clients.matchAll({ type: 'window' }).then(windowClients => {
      // Check if there is already a window/tab open with the target URL
      for (const client of windowClients) {
        if (client.url === event.notification.data.url && 'focus' in client) {
          return client.focus();
        }
      }
      // If no window/tab is open, open a new one
      return clients.openWindow(event.notification.data.url);
    })
  );
}); 